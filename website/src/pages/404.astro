---
import HomeLayout from "@layouts/HomeLayout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";
import { Icon } from "astro-icon/components";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");
---

<HomeLayout
  title="404 - Page Not Found"
  type="website"
  imageUrl={i18n.openGraph.image}
  description="Sorry, the page you are looking for does not exist."
  publishedTime={i18n.openGraph.publishedTime}
  modifiedTime={i18n.openGraph.modifiedTime}
  author={i18n.openGraph.author}
  primaryCategory={i18n.openGraph.primaryCategory}
>
  <div
    class="flex flex-col items-center justify-center text-btcgray-800 max-w-4xl mx-auto px-10 sm:px-12 lg:px-14 py-24"
  >
    <div class="text-center">
      <h1 class="text-8xl font-bold text-brand-500 mb-6">404</h1>
      <h2 class="text-4xl font-semibold mb-6">Page Not Found</h2>
      <p class="text-xl text-btcgray-600 mb-10">
        Sorry, the page you're looking for doesn't exist or has been moved.
      </p>
      <a
        href="/"
        class="inline-flex items-center justify-center bg-btcgray-800 text-white p-4 rounded-lg hover:bg-btcgray-700 transition-colors duration-300 min-w-[200px]"
      >
        <Icon name="bi:arrow-left" class="w-5 h-5 mr-2" />
        <span>Back to Home</span>
      </a>
    </div>
  </div>
</HomeLayout>

<script>
  // Simple animation for the 404 page
  document.addEventListener("astro:page-load", () => {
    const backButton = document.querySelector('a[href="/"]');
    if (backButton) {
      backButton.addEventListener("mouseenter", () => {
        backButton.classList.add("scale-105");
        setTimeout(() => backButton.classList.remove("scale-105"), 200);
      });
    }
  });
</script>
<script>
  const form = document.querySelector("form");
  const emailInput = document.querySelector('input[type="email"]');
  const submitButton = document.querySelector('button[type="submit"]');
  const githubStarCountElement = document.getElementById("github-star-count");
  const subscriberCountValue = document.getElementById(
    "subscriber-count-value"
  );

  if (form && emailInput && submitButton) {
    const htmlEmailInput = emailInput as HTMLInputElement;
    const htmlSubmitButton = submitButton as HTMLButtonElement;
    const originalButtonText = htmlSubmitButton.textContent || "Submit";

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const email = htmlEmailInput.value;
      if (!email) {
        return;
      }
      const name = email.substring(0, email.indexOf("@"));
      const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
      const apiUsername = "skeptrune-api-key";

      if (!apiKey) {
        console.error(
          "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
        );
        htmlSubmitButton.textContent = "Error: Config Missing";
        htmlSubmitButton.disabled = true;
        return;
      }

      htmlSubmitButton.textContent = "Submitting...";
      htmlSubmitButton.disabled = true;

      try {
        const response = await fetch(
          "https://listmonk.skeptrune.com/api/subscribers",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
            },
            body: JSON.stringify({
              email: email,
              name: name,
              status: "enabled",
              lists: [3],
            }),
          }
        );

        if (response.ok) {
          htmlSubmitButton.textContent = "Subscribed!";
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700"
          );
          htmlSubmitButton.classList.add("bg-green-500");

          const currentCount = parseInt(
            subscriberCountValue?.textContent || "0",
            10
          );
          if (subscriberCountValue) {
            subscriberCountValue.textContent = (
              currentCount + 1
            ).toLocaleString();
          }

          try {
            const txEmailResponse = await fetch(
              "https://listmonk.skeptrune.com/api/tx",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json; charset=utf-8",
                  Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
                },
                body: JSON.stringify({
                  subscriber_email: email,
                  template_id: 5,
                  content_type: "html",
                }),
              }
            );
            if (!txEmailResponse.ok) {
              console.error(
                "Failed to send welcome email:",
                txEmailResponse.status,
                await txEmailResponse.text()
              );
            }
          } catch (txError) {
            console.error("Error sending welcome email:", txError);
          }
        } else if (response.status === 409) {
          htmlSubmitButton.textContent = "Already Subscribed";
          htmlSubmitButton.disabled = false;
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700",
            "bg-green-500"
          );
          htmlSubmitButton.classList.add("bg-yellow-500");

          setTimeout(() => {
            if (htmlSubmitButton.textContent === "Already Subscribed") {
              htmlSubmitButton.textContent = originalButtonText;
              htmlSubmitButton.classList.remove("bg-yellow-500");
              htmlSubmitButton.classList.add(
                "bg-btcgray-800",
                "hover:bg-btcgray-700"
              );
            }
          }, 3000);
        } else {
          const errorData = await response.json();
          console.error("Failed to subscribe:", response.status, errorData);
          htmlSubmitButton.textContent = "Subscription Failed";
          htmlSubmitButton.disabled = false;
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700",
            "bg-green-500"
          );
          htmlSubmitButton.classList.add("bg-red-500");

          setTimeout(() => {
            if (htmlSubmitButton.textContent === "Subscription Failed") {
              htmlSubmitButton.textContent = originalButtonText;
              htmlSubmitButton.classList.remove("bg-red-500");
              htmlSubmitButton.classList.add(
                "bg-btcgray-800",
                "hover:bg-btcgray-700"
              );
            }
          }, 3000);
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        htmlSubmitButton.textContent = "Error";
        htmlSubmitButton.disabled = false;
        htmlSubmitButton.classList.remove(
          "bg-btcgray-800",
          "hover:bg-btcgray-700",
          "bg-green-500"
        );
        htmlSubmitButton.classList.add("bg-red-500");

        setTimeout(() => {
          if (htmlSubmitButton.textContent === "Error") {
            htmlSubmitButton.textContent = originalButtonText;
            htmlSubmitButton.classList.remove("bg-red-500");
            htmlSubmitButton.classList.add(
              "bg-btcgray-800",
              "hover:bg-btcgray-700"
            );
          }
        }, 3000);
      }
    });
  } else {
    console.error("Form, email input, or submit button not found.");
  }

  async function fetchListmonkSubscriberCount() {
    if (!subscriberCountValue) {
      console.error("Subscriber count value element not found.");
      return;
    }
    const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
    const apiUsername = "skeptrune-api-key";

    if (!apiKey) {
      console.error(
        "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
      );
      return;
    }

    try {
      const response = await fetch(
        "https://listmonk.skeptrune.com/api/lists?page=1&query=&order_by=id&order=asc",
        {
          method: "GET",
          headers: {
            Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data && data.data && Array.isArray(data.data.results)) {
          const list = data.data.results.find(
            (item: { id: number }) => item.id === 3
          );
          if (list && typeof list.subscriber_count === "number") {
            subscriberCountValue.textContent =
              list.subscriber_count.toLocaleString();
          } else {
            console.error(
              "List with id 3 not found or subscriber_count missing:",
              data
            );
          }
        } else {
          console.error(
            "Failed to parse subscriber count from Listmonk API response:",
            data
          );
        }
      } else {
        console.error(
          "Failed to fetch Listmonk subscriber count:",
          response.status
        );
      }
    } catch (error) {
      console.error("Error fetching Listmonk subscriber count:", error);
    }
  }

  async function fetchGitHubStars() {
    if (!githubStarCountElement) {
      console.error("GitHub star count element not found.");
      return;
    }
    try {
      const response = await fetch(
        "https://api.github.com/repos/devflowinc/threshold"
      );
      if (response.ok) {
        const data = await response.json();
        const starCount = data.stargazers_count;
        githubStarCountElement.textContent = starCount.toLocaleString();
      } else {
        console.error("Failed to fetch GitHub stars:", response.status);
      }
    } catch (error) {
      console.error("Error fetching GitHub stars:", error);
    }
  }

  document.addEventListener("astro:page-load", () => {
    fetchGitHubStars();
    fetchListmonkSubscriberCount();
  });
</script>
