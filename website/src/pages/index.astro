---
import HomeLayout from "@layouts/HomeLayout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";
import { Icon } from "astro-icon/components";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");
---

<HomeLayout
  title={i18n.openGraph.title}
  type={i18n.openGraph.type}
  imageUrl={i18n.openGraph.image}
  description={i18n.openGraph.description}
  publishedTime={i18n.openGraph.publishedTime}
  modifiedTime={i18n.openGraph.modifiedTime}
  author={i18n.openGraph.author}
  primaryCategory={i18n.openGraph.primaryCategory}
>
  <div class="flex flex-col md:flex-row gap-16 w-full max-w-4xl">
    <section class="flex-1">
      <h2 class="text-2xl font-semibold mb-4 border-l-4 border-brand-500 pl-4">
        {i18n.waitlist.label}
      </h2>
      <p class="mb-4 text-btcgray-600">
        {i18n.waitlist.description}
      </p>
      <form class="flex flex-col">
        <input
          type="email"
          placeholder={i18n.waitlist.inputPlaceholder}
          class="border border-btcgray-300 p-3 rounded mb-1 focus:ring-2 focus:ring-brand-500 outline-none"
          required
        />
        <p class="text-sm text-btcgray-600">
          &rarr; <span id="subscriber-count-value">4</span>
          {i18n.waitlist.numberSuffix}
        </p>
        <button
          type="submit"
          class="bg-btcgray-800 mt-4 text-white p-3 rounded hover:bg-btcgray-700 hover:cursor-pointer disabled:cursor-not-allowed"
        >
          {i18n.waitlist.buttonText}
        </button>
        <a
          href="https://github.com/devflowinc/threshold"
          target="_blank"
          rel="noopener noreferrer"
          id="star-repo-button"
          class="mt-4 flex items-center justify-center bg-white text-btcgray-800 border border-btcgray-800 p-3 rounded hover:bg-btcgray-100 hover:cursor-pointer w-full"
        >
          <Icon name="simple-icons:github" class="w-4 h-4 mr-2" />
          <span>star us</span>
          <span class="mx-1">|</span>
          <span id="github-star-count">4</span>
        </a>
      </form>
    </section>

    <section class="flex-1">
      <h2 class="text-2xl font-semibold mb-4 border-l-4 border-brand-500 pl-4">
        {i18n.roadmap.label}
      </h2>
      <ul class="space-y-4 w-full">
        {
          i18n.roadmap.items.map((item) => (
            <li class="flex items-start">
              <span
                class={`rounded-full w-3 h-3 mr-3 mt-1.5 ${
                  item.status === "in progress"
                    ? "bg-brand-500"
                    : "bg-btcgray-400"
                }`}
              />
              <div class="w-[93%]">
                <h3 class="font-semibold">{item.label}</h3>
                <p class="text-sm text-btcgray-600">{item.description}</p>
                <span class="text-xs text-btcgray-400">{item.status}</span>
              </div>
            </li>
          ))
        }
      </ul>
    </section>
  </div>
</HomeLayout>
<script>
  const form = document.querySelector("form");
  const emailInput = document.querySelector('input[type="email"]');
  const submitButton = document.querySelector('button[type="submit"]');
  const githubStarCountElement = document.getElementById("github-star-count");
  const subscriberCountValue = document.getElementById(
    "subscriber-count-value"
  );

  if (form && emailInput && submitButton) {
    const htmlEmailInput = emailInput as HTMLInputElement;
    const htmlSubmitButton = submitButton as HTMLButtonElement;
    const originalButtonText = htmlSubmitButton.textContent || "Submit";

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const email = htmlEmailInput.value;
      if (!email) {
        return;
      }
      const name = email.substring(0, email.indexOf("@"));
      const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
      const apiUsername = "skeptrune-api-key";

      if (!apiKey) {
        console.error(
          "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
        );
        htmlSubmitButton.textContent = "Error: Config Missing";
        htmlSubmitButton.disabled = true;
        return;
      }

      htmlSubmitButton.textContent = "Submitting...";
      htmlSubmitButton.disabled = true;

      try {
        const response = await fetch(
          "https://listmonk.skeptrune.com/api/subscribers",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
            },
            body: JSON.stringify({
              email: email,
              name: name,
              status: "enabled",
              lists: [3],
            }),
          }
        );

        if (response.ok) {
          htmlSubmitButton.textContent = "Subscribed!";
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700"
          );
          htmlSubmitButton.classList.add("bg-green-500");

          const currentCount = parseInt(
            subscriberCountValue?.textContent || "0",
            10
          );
          if (subscriberCountValue) {
            subscriberCountValue.textContent = (
              currentCount + 1
            ).toLocaleString();
          }

          try {
            const txEmailResponse = await fetch(
              "https://listmonk.skeptrune.com/api/tx",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json; charset=utf-8",
                  Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
                },
                body: JSON.stringify({
                  subscriber_email: email,
                  template_id: 5,
                  content_type: "html",
                }),
              }
            );
            if (!txEmailResponse.ok) {
              console.error(
                "Failed to send welcome email:",
                txEmailResponse.status,
                await txEmailResponse.text()
              );
            }
          } catch (txError) {
            console.error("Error sending welcome email:", txError);
          }
        } else if (response.status === 409) {
          htmlSubmitButton.textContent = "Already Subscribed";
          htmlSubmitButton.disabled = false;
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700",
            "bg-green-500"
          );
          htmlSubmitButton.classList.add("bg-yellow-500");

          setTimeout(() => {
            if (htmlSubmitButton.textContent === "Already Subscribed") {
              htmlSubmitButton.textContent = originalButtonText;
              htmlSubmitButton.classList.remove("bg-yellow-500");
              htmlSubmitButton.classList.add(
                "bg-btcgray-800",
                "hover:bg-btcgray-700"
              );
            }
          }, 3000);
        } else {
          const errorData = await response.json();
          console.error("Failed to subscribe:", response.status, errorData);
          htmlSubmitButton.textContent = "Subscription Failed";
          htmlSubmitButton.disabled = false;
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700",
            "bg-green-500"
          );
          htmlSubmitButton.classList.add("bg-red-500");

          setTimeout(() => {
            if (htmlSubmitButton.textContent === "Subscription Failed") {
              htmlSubmitButton.textContent = originalButtonText;
              htmlSubmitButton.classList.remove("bg-red-500");
              htmlSubmitButton.classList.add(
                "bg-btcgray-800",
                "hover:bg-btcgray-700"
              );
            }
          }, 3000);
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        htmlSubmitButton.textContent = "Error";
        htmlSubmitButton.disabled = false;
        htmlSubmitButton.classList.remove(
          "bg-btcgray-800",
          "hover:bg-btcgray-700",
          "bg-green-500"
        );
        htmlSubmitButton.classList.add("bg-red-500");

        setTimeout(() => {
          if (htmlSubmitButton.textContent === "Error") {
            htmlSubmitButton.textContent = originalButtonText;
            htmlSubmitButton.classList.remove("bg-red-500");
            htmlSubmitButton.classList.add(
              "bg-btcgray-800",
              "hover:bg-btcgray-700"
            );
          }
        }, 3000);
      }
    });
  } else {
    console.error("Form, email input, or submit button not found.");
  }

  async function fetchListmonkSubscriberCount() {
    if (!subscriberCountValue) {
      console.error("Subscriber count value element not found.");
      return;
    }
    const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
    const apiUsername = "skeptrune-api-key";

    if (!apiKey) {
      console.error(
        "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
      );
      return;
    }

    try {
      const response = await fetch(
        "https://listmonk.skeptrune.com/api/lists/3",
        {
          method: "GET",
          headers: {
            Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (
          data &&
          data.data &&
          typeof data.data.subscriber_count === "number"
        ) {
          subscriberCountValue.textContent =
            data.data.subscriber_count.toLocaleString();
        } else {
          console.error(
            "Failed to parse subscriber count from Listmonk API response:",
            data
          );
        }
      } else {
        console.error(
          "Failed to fetch Listmonk subscriber count:",
          response.status
        );
      }
    } catch (error) {
      console.error("Error fetching Listmonk subscriber count:", error);
    }
  }

  async function fetchGitHubStars() {
    if (!githubStarCountElement) {
      console.error("GitHub star count element not found.");
      return;
    }
    try {
      const response = await fetch(
        "https.api.github.com/repos/devflowinc/threshold"
      );
      if (response.ok) {
        const data = await response.json();
        const starCount = data.stargazers_count;
        githubStarCountElement.textContent = starCount.toLocaleString();
      } else {
        console.error("Failed to fetch GitHub stars:", response.status);
      }
    } catch (error) {
      console.error("Error fetching GitHub stars:", error);
    }
  }

  document.addEventListener("astro:page-load", () => {
    fetchGitHubStars();
    fetchListmonkSubscriberCount();
  });
</script>
