---
import HomeLayout from "@layouts/HomeLayout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");
---

<HomeLayout
  title={i18n.openGraph.title}
  type={i18n.openGraph.type}
  imageUrl={i18n.openGraph.image}
  description={i18n.openGraph.description}
  publishedTime={i18n.openGraph.publishedTime}
  modifiedTime={i18n.openGraph.modifiedTime}
  author={i18n.openGraph.author}
  primaryCategory={i18n.openGraph.primaryCategory}
>
  <div class="flex flex-col md:flex-row gap-16 w-full max-w-4xl">
    <section class="flex-1">
      <h2 class="text-2xl font-semibold mb-4 border-l-4 border-brand-500 pl-4">
        {i18n.waitlist.label}
      </h2>
      <p class="mb-4 text-btcgray-600">
        {i18n.waitlist.description}
      </p>
      <form class="flex flex-col">
        <input
          type="email"
          placeholder={i18n.waitlist.inputPlaceholder}
          class="border border-btcgray-300 p-3 rounded mb-4 focus:ring-2 focus:ring-brand-500 outline-none"
        />
        <button
          type="submit"
          class="bg-btcgray-800 text-white p-3 rounded hover:bg-btcgray-700 hover:cursor-pointer disabled:cursor-not-allowed"
        >
          {i18n.waitlist.buttonText}
        </button>
      </form>
      <p class="mt-2
          text-sm
          text-btcgray-600">
        &rarr; 1,070 {i18n.waitlist.numberSuffix}
      </p>
    </section>

    <section class="flex-1">
      <h2 class="text-2xl font-semibold mb-4 border-l-4 border-brand-500 pl-4">
        {i18n.roadmap.label}
      </h2>
      <ul class="space-y-4 w-full">
        {
          i18n.roadmap.items.map((item) => (
            <li class="flex items-start">
              <span
                class={`rounded-full w-3 h-3 mr-3 mt-1.5 ${
                  item.status === "in progress"
                    ? "bg-brand-500"
                    : "bg-btcgray-400"
                }`}
              />
              <div class="w-[93%]">
                <h3 class="font-semibold">{item.label}</h3>
                <p class="text-sm text-btcgray-600">{item.description}</p>
                <span class="text-xs text-btcgray-400">{item.status}</span>
              </div>
            </li>
          ))
        }
      </ul>
    </section>
  </div>
</HomeLayout>
<script>
  const form = document.querySelector("form");
  const emailInput = document.querySelector('input[type="email"]');
  const submitButton = document.querySelector('button[type="submit"]');

  if (form && emailInput && submitButton) {
    const htmlEmailInput = emailInput as HTMLInputElement;
    const htmlSubmitButton = submitButton as HTMLButtonElement;
    const originalButtonText = htmlSubmitButton.textContent || "Submit";

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const email = htmlEmailInput.value;
      if (!email) {
        return;
      }
      const name = email.substring(0, email.indexOf("@"));
      const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
      const apiUsername = "skeptrune-api-key";

      if (!apiKey) {
        console.error(
          "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
        );
        htmlSubmitButton.textContent = "Error: Config Missing";
        htmlSubmitButton.disabled = true;
        return;
      }

      htmlSubmitButton.textContent = "Submitting...";
      htmlSubmitButton.disabled = true;

      try {
        const response = await fetch(
          "https://listmonk.skeptrune.com/api/subscribers",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
            },
            body: JSON.stringify({
              email: email,
              name: name,
              status: "enabled",
              lists: [1],
            }),
          }
        );

        if (response.ok || response.status === 201 || response.status === 409) {
          htmlSubmitButton.textContent = "Subscribed!";
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700"
          );
          htmlSubmitButton.classList.add("bg-green-500");
        } else {
          const errorData = await response.json();
          console.error("Failed to subscribe:", response.status, errorData);
          htmlSubmitButton.textContent = "Subscription Failed";
          htmlSubmitButton.disabled = false;
          htmlSubmitButton.classList.remove(
            "bg-btcgray-800",
            "hover:bg-btcgray-700",
            "bg-green-500"
          );
          htmlSubmitButton.classList.add("bg-red-500");

          setTimeout(() => {
            if (htmlSubmitButton.textContent === "Subscription Failed") {
              htmlSubmitButton.textContent = originalButtonText;
              htmlSubmitButton.classList.remove("bg-red-500");
              htmlSubmitButton.classList.add(
                "bg-btcgray-800",
                "hover:bg-btcgray-700"
              );
            }
          }, 3000);
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        htmlSubmitButton.textContent = "Error";
        htmlSubmitButton.disabled = false;
        htmlSubmitButton.classList.remove(
          "bg-btcgray-800",
          "hover:bg-btcgray-700",
          "bg-green-500"
        );
        htmlSubmitButton.classList.add("bg-red-500");

        setTimeout(() => {
          if (htmlSubmitButton.textContent === "Error") {
            htmlSubmitButton.textContent = originalButtonText;
            htmlSubmitButton.classList.remove("bg-red-500");
            htmlSubmitButton.classList.add(
              "bg-btcgray-800",
              "hover:bg-btcgray-700"
            );
          }
        }, 3000);
      }
    });
  } else {
    console.error("Form, email input, or submit button not found.");
  }
</script>
