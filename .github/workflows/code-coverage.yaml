name: Code Coverage

on: pull_request

jobs:
  test:
    runs-on: blacksmith-16vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Caching Rust Dependencies
        uses: useblacksmith/cache@v5
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: rustup update 1.87
      - run: rustup default 1.87
      # - run: cargo install cargo-tarpaulin
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libclang-dev clang
      - name: Run Code Coverage
        run: |
          cargo tarpaulin --all-targets --exclude-files "target/*" --count --out Json
          mv ./tarpaulin-report.json target/tarpaulin/coverage.json
      - name: Show coverage report for debugging
        if: always()
        run: cat target/tarpaulin/coverage.json
      - name: Generate Coverage Badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          pip install anybadge
          python -c '
          import json
          import os
          import subprocess

          report_path = "target/tarpaulin/coverage.json"
          with open(report_path, "r") as f:
              data = json.load(f)

          total_lines = 0
          covered_lines = 0
          files = data.get("files", [])

          for file_data in files:
              file_path = os.path.join(*file_data.get("path", []))
              if "/.cargo/" in file_path or "target/debug/build" in file_path or "/tests/" in file_path or file_path.endswith("/build.rs"):
                  continue
              
              trace_lines = file_data.get("traces", [])
              for trace in trace_lines:
                  if "stats" in trace and "Line" in trace["stats"]:
                      total_lines += 1
                      if trace["stats"]["Line"] > 0:
                          covered_lines += 1

          percentage = 0
          if total_lines > 0:
              percentage = round((covered_lines / total_lines) * 100)

          print(f"Total lines: {total_lines}")
          print(f"Covered lines: {covered_lines}")
          print(f"Coverage percentage: {percentage}%")

          output_dir = "badges_output/badges"
          os.makedirs(output_dir, exist_ok=True)
          badge_path = os.path.join(output_dir, "coverage.svg")

          thresholds = {
              "40": "red",
              "60": "orange",
              "80": "yellow",
              "90": "green"
          }

          badge_command = [
              "anybadge",
              "--label", "coverage",
              "--value", str(percentage),
              "--file", badge_path,
              "--suffix", "%",
          ]
          threshold_args = [f"{k}={v}" for k, v in thresholds.items()]
          badge_command.extend(threshold_args)
          subprocess.run(badge_command)

          print(f"Badge created at {badge_path}")
          '
      - name: Deploy badge to gh-pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./badges_output
          keep_files: true
      - name: Post Coverage Comment on PR
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@v14
        with:
          path: cobertura.xml
          minimum_coverage: 0
          show_branch: true
          show_line: true
